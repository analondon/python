# instance.method()
# or
# Class.method(instance)

import os
import re
import Utils


#parent
class Project:

    @classmethod
    def set_project(cls):
        cls.get_project()
        Person.get_members_names()
        with open('all_projects.txt', 'a+') as fhandle:
            fhandle.write(project_name + ',' + str(number_of_members) + ',' + members_names + ',')

    @staticmethod
    def lookup_project(projectnamegiven):
        global projectfound
        global words
        global wholeline
        projectfound = None
        with open('all_projects.txt', 'r+') as fhandle:
            lines = fhandle.readlines()
            if len(lines) < 1:
                projectfound = False
            else:
                for line in lines:
                    words = line.split(',')
                    if projectnamegiven != words[0]:
                        projectfound = False
                        continue
                    elif projectnamegiven == words[0]:
                        projectfound = True
                        wholeline = words[:]
                        break
        return projectfound
        return words
        return wholeline

    #allowes our user to add a new project into the file
    def get_project():
        global project_name
        global number_of_members
        while True:
            project_name = input("""
    Enter the project name: """).lower()
            if not re.match('[a-zA-Z]', project_name): #checks in the name is valid
                print("""
    Name must have letters and numbers""")
                continue
            else:
                Project.lookup_project(project_name)
                if projectfound == False:
                    project_name = '\n' + project_name
                else:
                    print("""
    Name already exists. Please enter a new name.""")
                    continue
                break
        while True:
            number_of_members = input("""
    Enter the number of team members: """)
            try:
                int(number_of_members) > 0
            except:
                print("""
    <ERROR> It must be a number greater than 0""")
                continue
            else:
                break
        return project_name
        return number_of_members

    def get_votes():
        all_votes = []
        while True:
            action_v = input("""
    Enter the project name: """).lower()
            Project.lookup_project(action_v)
            if projectfound == False:
                actioninput.action = input("""
    Project not found. Press <ESC> to go back to
    the Main Menu or press <ENTER> to try again: """)
                continue
            else:
                if action_v != words[0] or len(words) < 1:
                    continue
                else:
                    print(f"""
    There are {words[1]} team members""")
                    members_names = words[2:5]
                    print(members_names, 'line 93')
                    members_being_voted = members_names
                    while True:
                        for mn in members_names:
                            member_and_votes = []
                            total = 0
                            vote = 0
                            print(f"""
            Enter {mn}'s votes, points must add up to 100: """)
                            for mbv in members_being_voted:
                                if mn != mbv:
                                    vote = input(f"""
            Enter {mn}'s points for {mbv}:    """)
                                    try:
                                        if type(int(vote)) == 'int' :
                                            continue
                                    except:
                                        print("""
    <ERROR> Points should be a valid number in between
    0 and 100. Please press  <ENTER>  and start again.""")
                                        continue
                                    else:
                                        total = total + int(vote)
                                        member_and_votes.extend([mbv, vote])
                                        continue
                            if re.match('[0-9]', vote) and total != 100 :
                                print("""
    Points must add up to 100. Please start again.""")
                                break
                            else:
                                member_and_votes.insert(0, mn)
                                all_votes.extend(member_and_votes)
                                continue
                        break
            break
        all_votes = ','.join(all_votes)
        with open('all_projects.txt', 'r+') as fhandle:
            lines = fhandle.readlines()
            for i, l in enumerate(lines):
                lines[i] = lines[i].strip() + all_votes + ',' if l.startswith(action_v) else lines[i]
            fhandle.seek(0)
            for l in lines:
                fhandle.write(l)

        print(input("""
    Press <Enter> to return to the main menu: """));

    def func_s():
        action_s = input("""
    Enter the project name: """).lower()
        Project.lookup_project(action_s) #checks if given project name is in the file
        if projectfound == True:
            first_member = round(Project.rate_calculator(12, 17), 2)
            second_member = round(Project.rate_calculator(7, 19), 2)
            third_member = round(Project.rate_calculator(9, 14), 2)

            print(f"""
        The point allocation based on votes is: """)
            print(f"""
        {wholeline[2]}: {first_member}""")
            print(f"""
        {wholeline[3]}: {second_member}""")
            print(f"""
        {wholeline[4]}: {third_member}""")

        print(input("""
        Press <Enter> to return to the main menu: """, ));

    @classmethod
    def rate_calculator(cls, loc1, loc2):
        vote1 = float(wholeline[loc1]) / (100 - float(wholeline[loc1]))
        vote2 = float(wholeline[loc2]) / (100 - float(wholeline[loc2]))
        rate = 1 / (1 + vote1 + vote2)
        return rate

#child class
class Person(Project):

    def get_members_names():
        global members_names
        global number_of_members
        members_names = []
        number_of_members = int(number_of_members)
        member_number = 0
        while number_of_members > 0:
            number_of_members -= 1
            member_number += 1
            while True:
                member_name = input(f"""
            Enter the name of team member {member_number}: """).lower()
                if not re.match('[a-zA-Z]', member_name):
                    print("""
            Please enter a valid name""")
                    continue
                else:
                    members_names.append(member_name)
                    break
        members_names = ','.join(members_names)
        return members_names

        print(input("""
    Press <Enter> to return to the main menu: """, ));
